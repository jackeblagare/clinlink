<?page title="View Appointment" contentType="text/html;charset=UTF-8"?>
<zk>

<zscript>
		<![CDATA[
		import clinlink.appointment.*;
		import org.zkoss.lang.Strings;
		import java.util.Calendar;
		import java.util.ArrayList;
		
		int doc;
		if((session.getAttribute("usertype") != null)&&(Integer.parseInt(session.getAttribute("usertype").toString()) == 2)){
			doc = Integer.parseInt(session.getAttribute("userid").toString());
		}else if((session.getAttribute("docID") != null) && ((session.getAttribute("usertype") != null)&&((Integer.parseInt(session.getAttribute("usertype").toString()) == 3)||(Integer.parseInt(session.getAttribute("usertype").toString()) == 4)))){
			doc = Integer.parseInt(session.getAttribute("docID").toString());
		}else{
			if(session.getAttribute("usertype") != null){
				int u = Integer.parseInt(session.getAttribute("usertype").toString());
				if(u == 1){
					Executions.sendRedirect("admin.zul");
				}else if(u == 3){
					Executions.sendRedirect("staff.zul");
				}else if(u == 4){
					Executions.sendRedirect("patient.zul");
				}else{
					session.invalidate();
					Executions.sendRedirect("/");
				}
			}else{
				session.invalidate();
				Executions.sendRedirect("/");
			}
		}

		DoctorManager dm = new DoctorManager();
		String doc_name = DoctorController.getDoctorName(dm, doc);
		AppointmentController ac = new AppointmentController();
		Appointment a = new Appointment();
		ConsultationHour ch = new ConsultationHour();
		PatientManager pm = new PatientManager();
		
		public void requestViewAppointment(){
			if(session.getAttribute("usertype")!=null){
				int ut = Integer.parseInt(session.getAttribute("usertype").toString());
				if((ut == 3) || (ut == 4)){
					Menuseparator ms = new Menuseparator(); Menuitem mi = new Menuitem();
					mi.setLabel("Doctor List"); mi.setHref("doctorView.zul");
					mb.appendChild(ms); mb.appendChild(mi);
				}
			}
			ac.getScheduledAppointment(a, ch, doc);
			displayAppointment();
		}
		
		public void displayAppointment(){
			this.page.setTitle("View Appointment - "+doc_name);
			if((session.getAttribute("usertype")!=null)&&(Integer.parseInt(session.getAttribute("usertype").toString())==4)){
				if(session.getAttribute("userid")!=null){
					ac.getPatientAppointment(a, doc, Integer.parseInt(session.getAttribute("userid").toString()));
				}
			}
			make.setVisible(false); win1.setVisible(true);
			Calendar cal = Calendar.getInstance();
			String[] months = {"Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec"};

			Integer[] days = new Integer[7]; String[] weekday = new String[7]; String[] comp = new String[7];
			for(int n=0; n<7; n++){
				cal.set(Calendar.DAY_OF_WEEK, n+1); days[n] = cal.get(Calendar.DATE);
				weekday[n] = months[cal.get(Calendar.MONTH)]+" "+days[n];
				if((cal.get(Calendar.MONTH)+1) < 10){
					if(days[n] < 10){
						comp[n] = cal.get(Calendar.YEAR)+"-0"+(cal.get(Calendar.MONTH)+1)+"-0"+days[n];
					}else{
						comp[n] = cal.get(Calendar.YEAR)+"-0"+(cal.get(Calendar.MONTH)+1)+"-"+days[n];
					}
				}else{
					if(days[n] < 10){
						comp[n] = cal.get(Calendar.YEAR)+"-"+(cal.get(Calendar.MONTH)+1)+"-0"+days[n];
					}else{
						comp[n] = cal.get(Calendar.YEAR)+"-"+(cal.get(Calendar.MONTH)+1)+"-"+days[n];
					}
				}
			}
			sun.setLabel(sun.getLabel()+":"+weekday[0]);
			mon.setLabel(mon.getLabel()+":"+weekday[1]);
			tues.setLabel(tues.getLabel()+":"+weekday[2]);
			wed.setLabel(wed.getLabel()+":"+weekday[3]);
			thurs.setLabel(thurs.getLabel()+":"+weekday[4]);
			fri.setLabel(fri.getLabel()+":"+weekday[5]);
			sat.setLabel(sat.getLabel()+":"+weekday[6]);
			
			int index=0;
			for(int j=0,z=8;j<18;j++){
				Row row = new Row();
				Label l1 = new Label();
				String b,e;
				if(j%2 == 0){
					if((j+z)<10){
						b="0"+(j+z)+":00";
						e="0"+(j+z)+":30";
					}else{
						b=(j+z)+":00";
						e=(j+z)+":30";
					}
				}else{
					z--;
					if((j+z)<9){
						b="0"+(j+z)+":30";
						e="0"+(j+z+1)+":00";
					}else if((j+z+1)==10){
						b="0"+(j+z)+":30";
						e=(j+z+1)+":00";
					}else{
						b=(j+z)+":30";
						e=(j+z+1)+":00";
					}
				}
				l1.setValue(b+" - "+e);
				row.appendChild(l1);
				for(int k=1; k<8; k++){
					Label la = new Label();
					if(ch.day.contains(k)){
						index = ch.day.indexOf(k);
						if(j%2 == 0){
							String begin=ch.start.get(index).toString().substring(0,5);
							String end=ch.end.get(index).toString().substring(0,5);
							if((begin.compareToIgnoreCase(b) <= 0)&&(end.compareToIgnoreCase(e) >= 0)){
								if(a.dates.contains(comp[k-1])){
									int q = a.dates.indexOf(comp[k-1]);
									String app=a.times.get(q).substring(0,5);
									if(app.equalsIgnoreCase(b)){
										displayPatName(la, q);
									}else{
										displayMake(la, b, comp, k);
									}
								}else{
									displayMake(la, b, comp, k);
								}
								if((end.compareToIgnoreCase(e)==0) && (ch.start.size()!=index+1)){
									ch.day.remove(index);
									ch.start.remove(index);
									ch.end.remove(index);
								}
							}else{
								la.setValue("");
							}
						}else{
							String begin=ch.start.get(index).toString().substring(0,5);
							String end=ch.end.get(index).toString().substring(0,5);
							if((begin.compareToIgnoreCase(b) <= 0)&&(end.compareToIgnoreCase(e) >= 0)){
								if(a.dates.contains(comp[k-1])){
									int q = a.dates.indexOf(comp[k-1]);
									String app=a.times.get(q).substring(0,5);
									if(app.equalsIgnoreCase(b)){
										displayPatName(la, q);
									}else{
										displayMake(la, b, comp, k);
									}
								}else{
									displayMake(la, b, comp, k);
								}
								if((end.compareToIgnoreCase(e)==0) && (ch.start.size()!=index+1)){
									ch.day.remove(index);
									ch.start.remove(index);
									ch.end.remove(index);
								}
							}else{
								la.setValue("");
							}
						}
					}else{
						la.setValue("");
					}
					row.appendChild(la);
				}
				rr.appendChild(row);
			}
		}
		
		private void displayPatName(Label la, int q){
			la.setValue(a.patients.get(q)+" ("+a.reasons.get(q)+")");
			if(session.getAttribute("usertype")!=null){
				if(Integer.parseInt(session.getAttribute("usertype").toString())==4){
					if(session.getAttribute("userid")!=null){
						int patId = Integer.parseInt(session.getAttribute("userid").toString());
						if(patId == a.patientID.get(q)){
							la.setStyle("color:blue");
							la.setValue(la.getValue()+"[cancel]");
							la.setId(a.appID.get(q).toString());
							addDel(la);
						}
					}
				}else if(Integer.parseInt(session.getAttribute("usertype").toString())==3){
					la.setStyle("color:blue");
					la.setValue(la.getValue()+"[cancel]");
					la.setId(a.appID.get(q).toString());
					addDel(la);
				}
			}
			a.dates.remove(q);
			a.times.remove(q);
			a.patients.remove(q);
			a.reasons.remove(q);
			a.patientID.remove(q);
			a.appID.remove(q);
		}
		
		private void addDel(Label l){
			l.addEventListener("onClick", new org.zkoss.zk.ui.event.EventListener(){
				public void onEvent(Event event) throws Exception {
					requestDeleteAppointment(l);
				}
			});
		}
		
		private void requestDeleteAppointment(Label l){
			try{
				if(Messagebox.show("Are you sure you want to cancel this appointment?","Cancel",Messagebox.YES|Messagebox.NO,Messagebox.QUESTION) == Messagebox.YES){
					if(ac.cancelAppointment(a, Integer.parseInt(l.getId())) == 0){
						alert("Appointment successfully deleted.");
						Executions.sendRedirect("appointmentView.zul");
					}else{
						Messagebox.show("Unable to delete appointment.","Error",Messagebox.OK,Messagebox.ERROR);
					}
				}
			}catch(Exception e){
				alert(e.toString());
			}
		}
		
		private void displayMake(Label la, String b, String[] comp, int k){
			if((session.getAttribute("usertype")!=null)&&((Integer.parseInt(session.getAttribute("usertype").toString())==3)||(Integer.parseInt(session.getAttribute("usertype").toString())==4))){
				la.setValue("make");
				int type = Integer.parseInt(session.getAttribute("usertype").toString());
				if((type==3)||((a.appDate.size()>0) && (a.appDate.contains(comp[k-1])==false))){
				la.setStyle("color:blue");
				if(session.getAttribute("usertype") != null){
						if(type != 2){
							if((type == 4) && (session.getAttribute("userid") != null)){
								la.setId(b+","+comp[k-1]+","+doc_name+","+session.getAttribute("userid"));
							}else{
								la.setId(b+","+comp[k-1]+","+doc_name);
							}
						}else{
							la.setId(b+","+comp[k-1]+","+doc_name);
						}
					}
					addListener(la);
				}
			}else{
				la.setValue("-----");
			}
		}
		
		private void addListener(Label l){
			l.addEventListener("onClick", new org.zkoss.zk.ui.event.EventListener(){
				public void onEvent(Event event) throws Exception {
					requestMakeAppointment(l);
				}
			});
		}
		
		private void requestMakeAppointment(Label l){
			this.page.setTitle("Make Appointment - "+doc_name);
			String s = l.getId().toString();
			String[] q = s.split(",");
			Vbox v1 = new Vbox(); Combobox c1 = new Combobox(); c1.setAutodrop(true);
			Button b1= new Button("Add"); Button b2 = new Button("Cancel");
			b1.addEventListener("onClick", new org.zkoss.zk.ui.event.EventListener(){
				public void onEvent(Event event) throws Exception {
					try{
					if(ac.isValid(c1.getValue(), t2.getValue(), t3.getValue(), t4.getValue(), t5.getValue())){
					if(q.length == 4){
						int success = ac.makeAppointment(a, c1.getValue(), Integer.parseInt(q[3]), doc, q[1], q[0], t5.getValue());
						if(success == 0){
							alert("Appointment successfully made.");
						}else if(success == 1){
							Messagebox.show("Unable to schedule appointment. Please select another date and time slot.","Error",Messagebox.OK,Messagebox.ERROR);
						}else{							
							Messagebox.show(c1.getValue()+" already has an appointment with "+doc_name,"Error",Messagebox.OK,Messagebox.ERROR);
						}
						Executions.sendRedirect("appointmentView.zul");
					}else{
						int tempid = pm.patients.indexOf(c1.getValue());
						if(tempid != -1){
							int success = ac.makeAppointment(a, pm.patients.get(tempid), pm.id.get(tempid), doc, q[1], q[0], t5.getValue());
							if(success == 0){
								alert("Appointment successfully made.");
							}else if(success == 1){
								Messagebox.show("Unable to schedule appointment. Please select another date and time slot.","Error",Messagebox.OK,Messagebox.ERROR);
							}else{
								Messagebox.show(pm.patients.get(tempid)+" already has an appointment with "+doc_name,"Error",Messagebox.OK,Messagebox.ERROR);
							}
							Executions.sendRedirect("appointmentView.zul");
						}else{
							//ac.makeAppointment(a, c1.getValue(), -1, doc, q[1], q[0], t5.getValue());
							Messagebox.show("Sorry, feature not yet supported.","Error",Messagebox.OK,Messagebox.ERROR);
							Executions.sendRedirect("appointmentView.zul");
						}
					}
					}else{
						Messagebox.show("Please complete the information.","Error",Messagebox.OK,Messagebox.ERROR);
					}
					}catch(Exception e){
						Messagebox.show("An error occurred: "+e.toString(),"Error",Messagebox.OK,Messagebox.ERROR);
					}
				}
			});
			b2.setHref("appointmentView.zul"); h1.appendChild(b1); h1.appendChild(b2);
			if(q.length == 4){
				c1.setText(PatientController.getPatientName(pm, Integer.parseInt(q[3])));
				c1.setReadonly(true);
			}else{
				PatientController.getPatientNames(pm);
				Object[] names = pm.patients.toArray();
				ListModel lm = new SimpleListModel(names);
				c1.setModel(lm);
			}
			v1.appendChild(c1); r1.appendChild(v1);
			t2.setText(q[2]); t3.setText(q[1]); t4.setText(q[0]); t5.setMaxlength(100);	
			r2.appendChild(t2); r3.appendChild(t3); r4.appendChild(t4);
			make.setVisible(true); win1.setVisible(false);
		}
	
		private void viewProfile(){
			if(session.getAttribute("usertype")!=null){
				int id = Integer.parseInt(session.getAttribute("usertype").toString());
				if(id == 2){
					Executions.sendRedirect("doctor.zul");
				}else if(id == 3){
					Executions.sendRedirect("staff.zul");
				}else if(id == 4){
					Executions.sendRedirect("patient.zul");
				}
			}
		}

	]]>
</zscript>

<separator />
<div>
<menubar id="mb">
	<menuitem label="Profile" onClick="viewProfile()"/>
	<menuitem label="Logout" onClick='session.invalidate(); Executions.sendRedirect("/")'/>
</menubar>

<div id="make" visible="false">
<separator/>
<grid>
	<columns>
		<column width="150px"></column>
	</columns>
	<rows id="r">
		<row id="r1">
			<label value="Patient Name:"/>
		</row>
		<row id="r2">
			<label value="Doctor Name:"/>
			<textbox id="t2" width="250px" readonly="true"/>
		</row>
		<row id="r3">
			<label value="Date:"/>
			<textbox id="t3" width="250px" readonly="true"/>
		</row>
		<row id="r4">
			<label value="Time:"/>
			<textbox id="t4" width="250px" readonly="true"/>
		</row>
		<row id="r5">
			<label value="Reason/s:"/>
			<hbox>
				<textbox id="t5" multiline="true" height="50px" width="250px"/>
				<label value="max of 100 characters"/>
			</hbox>
		</row>
		<row id="r6"><hbox><label value=""/></hbox>
			<hbox id="h1">
			</hbox>
		</row>
	</rows>
</grid>
</div>

<div id="win1" onCreate="requestViewAppointment()">
<separator/>
	<grid id="g">
		<columns id="c">
			<column label="Time" width="12.5%"/>
			<column label="Sun" width="12.5%" id="sun"/>
			<column label="Mon" width="12.5%" id="mon"/>
			<column label="Tues" width="12.5%" id="tues"/>
			<column label="Wed" width="12.5%" id="wed"/>
			<column label="Thurs" width="12.5%" id="thurs"/>
			<column label="Fri" width="12.5%" id="fri"/>
			<column label="Sat" width="12.5%" id="sat"/>
		</columns>
		<rows id="rr">
		</rows>
	</grid>
</div>
</div>

</zk>
